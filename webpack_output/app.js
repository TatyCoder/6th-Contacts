!function(t){var e={};function n(o){if(e[o])return e[o].exports;var a=e[o]={i:o,l:!1,exports:{}};return t[o].call(a.exports,a,a.exports,n),a.l=!0,a.exports}n.m=t,n.c=e,n.d=function(t,e,o){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:o})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var a in t)n.d(o,a,function(e){return t[e]}.bind(null,a));return o},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="webpack_output",n(n.s=0)}([function(t,e,n){"use strict";n.r(e);class o{constructor(t,e,n,o){this.street=t,this.city=e,this.state=n,this.zip=o}render(){return`\n        <p>${this.street}</p>\n        <p>${this.city}</p>\n        <p>${this.state}</p>\n        <p>${this.zip}</p>\n      `}}const a=[];class s{constructor(t,e,n,o){this.id=null===t?Math.random().toString():t,this.name=e,this.address=n,this.phone=o,this.isNewContact=!1}renderUpdate(){const t=document.createElement("div");t.innerHTML=`\n        <div id="addForm">\n        <form id="form">\n            <label for="name">Name</label>\n            <input type="text" name="name" id="name" value="${this.name}"/>\n            <label for="street">Street</label>\n            <input type="text" name="street" id="street" value="${this.address.street}"/>\n            <label for="city">City</label>\n            <input type="text" name="city" id="city" value="${this.address.city}"/>\n            <label for="state">State</label>\n            <input type="text" name="state" id="state" value="${this.address.state}"/>\n            <label for="zip">Zip Code</label>\n            <input type="text" name="zip" id="zip" value="${this.address.zip}"/>\n            <label for="phone">Phone</label>\n            <input type="text" name="phone" id="phone" value="${this.phone}"/>\n        </form>\n        <div class="actions">\n            <button id="cancelUpdateContactButton">Cancel</button>\n            <button id="saveUpdateContactButton">Save</button>\n        </div>\n    </div>\n    `;document.getElementById("updateForm").append(t);document.getElementById("cancelUpdateContactButton").addEventListener("click",window.showAllContacts);document.getElementById("saveUpdateContactButton").addEventListener("click",this.saveUpdatedContactHandler.bind(this))}async fetchContacts(){a.splice(0,a.length);let t=await fetch("https://phone-contacts-service-cgpil.ondigitalocean.app/getAllContacts",{method:"GET"});const e=await t.json();for(const t of e){const e=new s(t.id,t.name,new o(t.address.street,t.address.city,t.address.state,t.address.zip),t.phone);a.push(e)}console.log(a),window.showAllContacts()}async saveUpdatedContactHandler(){if(this.name=document.getElementById("name").value,this.address.street=document.getElementById("street").value,this.address.city=document.getElementById("city").value,this.address.state=document.getElementById("state").value,this.address.zip=document.getElementById("zip").value,this.phone=document.getElementById("phone").value,!0===this.isNewContact){let t=await fetch("https://phone-contacts-service-cgpil.ondigitalocean.app/addContact",{method:"POST",body:JSON.stringify(this),headers:{"Content-Type":"application/json"}});const e=await t.json();console.log(e),a.push(this),this.isNewContact=!1}else{let t=await fetch("https://phone-contacts-service-cgpil.ondigitalocean.app/updateContactByID",{method:"POST",body:JSON.stringify(this),headers:{"Content-Type":"application/json"}});const e=await t.json();console.log(e)}window.showAllContacts()}async deleteContactHandler(){let t=await fetch("https://phone-contacts-service-cgpil.ondigitalocean.app/deleteContactByID",{method:"POST",body:JSON.stringify(this),headers:{"Content-Type":"application/json"}});const e=await t.json();console.log(e),this.fetchContacts()}render(){const t=document.createElement("div"),e=this.address.render();t.innerHTML=`\n      <div class='contact-element'>\n        <b>${this.name}</b>\n         ${e}\n        <p>${this.phone}</p>\n        <button class= "deleteContactButton" id="deleteContactButton${this.id}">Delete</button>\n        <button class="updateContactButton" id="updateContactButton${this.id}">Update</button>\n      </div>\n    `;document.getElementById("contacts").append(t);document.getElementById("updateContactButton"+this.id).addEventListener("click",this.renderUpdate.bind(this));document.getElementById("deleteContactButton"+this.id).addEventListener("click",this.deleteContactHandler.bind(this))}}const i=t=>{const e=document.getElementById(t);for(;e.firstChild;)e.removeChild(e.firstChild)};(new s).fetchContacts(),window.showAllContacts=()=>{i("contacts"),i("updateForm");for(let t=0;t<a.length;t++)a[t].render()};document.getElementById("addNewContactButton").addEventListener("click",()=>{const t=new s(null,"",new o("","","",""),"");t.isNewContact=!0,t.renderUpdate()})}]);